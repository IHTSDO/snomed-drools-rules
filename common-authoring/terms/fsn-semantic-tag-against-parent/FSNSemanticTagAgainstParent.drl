import org.ihtsdo.drools.domain.Concept
import org.ihtsdo.drools.domain.Description
import org.ihtsdo.drools.domain.Relationship
import org.ihtsdo.drools.domain.Constants
import org.ihtsdo.drools.service.DescriptionService
import org.ihtsdo.drools.service.RelationshipService
import org.ihtsdo.drools.helper.DescriptionHelper
import org.ihtsdo.drools.response.InvalidContent
import org.ihtsdo.drools.response.Severity
import org.ihtsdo.drools.service.ConceptService
import java.util.ArrayList
import java.util.HashSet
import java.util.Set
import java.util.Collection
import java.util.Map

global java.util.List invalidContent
global DescriptionService descriptionService
global RelationshipService relationshipService
global ConceptService conceptService

function Set<String> getParentIdsForConcept(Concept concept, Boolean release) {
		Set<String> activeParentConceptIds = new HashSet<>();
		for (Relationship relationship : concept.getRelationships()) {
			if (relationship.isActive()
				&& !Constants.INFERRED_RELATIONSHIP.equals(relationship.getCharacteristicTypeId())
				&& Constants.IS_A.equals(relationship.getTypeId())
				&& !relationship.isAxiomGCI()
				&& (release == null || Boolean.valueOf(release).equals(relationship.isReleased()))) {
				activeParentConceptIds.add(relationship.getDestinationId());
			}
		}
		return activeParentConceptIds;
}
// Note - this rule uses international edition language refsets
rule "Semantic Tag of FSN compatible with concept parents"
	dialect "mvel"
	when
		c : Concept(active)
		topLevelHierarchies : HashSet(size > 0) from collect(String() from conceptService.findTopLevelHierarchiesOfConcept(c))
		topLevelFSNs : ArrayList(size > 0) from collect(String() from descriptionService.getFSNs(topLevelHierarchies, Constants.US_EN_LANG_REFSET, Constants.GB_EN_LANG_REFSET))
		d : Description(conceptId == c.id
						&& active
						&& typeId == Constants.FSN
						&& !DescriptionHelper.isSemanticTagCompatibleWithinHierarchy(term, DescriptionHelper.getTags(topLevelFSNs)))
	then
		InvalidContent invalid = new InvalidContent("4be1323d-9ef7-4c1d-a731-2fd5c89b27b1",
				d, "A concept's semantic tags should be compatible with those of the active parents.", Severity.WARNING)
		invalid.ignorePublishedCheck()
		invalidContent.add(invalid);
end

rule "Matching semantic tag should not allow adding a subtype as a parent"
	dialect "mvel"
	when
		c : Concept(active)
		statedAncestors : ArrayList(size == 1) from collect( String() from conceptService.findTopLevelHierarchiesOfConcept(c))
		parentFSNs : ArrayList() from collect( String() from descriptionService.getFSNs(getParentIdsForConcept(c, null),Constants.US_EN_LANG_REFSET,Constants.GB_EN_LANG_REFSET))
		d : Description(conceptId == c.id && active && typeId == Constants.FSN && !DescriptionHelper.isAllParentSemanticTagMatchWithTerm(term,parentFSNs))
		termSemanticTag : String() from DescriptionHelper.getTag(d.term)
		parentIds : ArrayList(size > 0) from collect( String() from descriptionService.findParentsNotContainingSemanticTag(c, termSemanticTag, Constants.US_EN_LANG_REFSET,Constants.GB_EN_LANG_REFSET))
		ancestorIds : HashSet(size > 0) from collect( String() from conceptService.findStatedAncestorsOfConcepts(parentIds))
		fsns : ArrayList(size > 0) from collect( String() from descriptionService.getFSNs(ancestorIds,Constants.US_EN_LANG_REFSET,Constants.GB_EN_LANG_REFSET))
		SemanticTags : ArrayList(size > 0) from collect( String() from DescriptionHelper.getTags(fsns))
		eval(SemanticTags contains termSemanticTag)
	then
		InvalidContent invalid = new InvalidContent("9209a757-2be8-4ec1-89bb-758fc76e054c",
				d, "It is not allowed to add a subtype as a parent.")
		invalid.ignorePublishedCheck()
		invalidContent.add(invalid);
end
