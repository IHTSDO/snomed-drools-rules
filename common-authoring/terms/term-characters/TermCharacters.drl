import org.ihtsdo.drools.domain.Description
import org.ihtsdo.drools.domain.Constants
import org.ihtsdo.drools.response.InvalidContent
import org.ihtsdo.drools.response.Severity

global java.util.List invalidContent

rule "An active term should not contain tabs, newlines, or characters @, $, #, \."
	dialect "mvel"
	when
		d : Description(active == true && term matches ".*[\\\\\t\r\n@$#].*")
	then
		invalidContent.add(new InvalidContent("fbd4bbb5-3e62-4ccb-824a-e82d9771c0ee",
				d, "An active term should not contain tabs, newlines, or characters @, $, #, \\.", Severity.WARNING));
end

function String findUnexpectedCharactersError(String term) {
	String ZEROSP = "\u200B";
	String LONG_DASH = "â€”";
	String EM_DASH = "\u2014";
	String EN_DASH = "\u2013";
	String RIGHT_APOS = "\u2019";
	String LEFT_APOS = "\u2018";
	String RIGHT_QUOTE = "\u201D";
	String LEFT_QUOTE = "\u201C";
	String GRAVE_ACCENT = "\u0060";
	String ACUTE_ACCENT = "\u00B4";
	String DOUBLE_APOS = "\u0027\u0027";

	String [][] unwantedChars = new String[][] {
		{ ZEROSP , "zero width space" },
		{ EM_DASH , "EM dash" },
		{ EN_DASH , "EN dash" },
		{ LONG_DASH , "long dash" },
		{ RIGHT_APOS , "right apostrophe" },
		{ LEFT_APOS , "left apostrophe" },
		{ RIGHT_QUOTE , "right quote" },
		{ LEFT_QUOTE , "left quote" },
		{ GRAVE_ACCENT , "grave accent" },
		{ ACUTE_ACCENT , "acute accents" },
		{ DOUBLE_APOS, "double apostrophe" }
	};
	for (String unwantedChar[] : unwantedChars) {
		if (term.indexOf(unwantedChar[0]) != -1) {
			return unwantedChar[1];
		}
	}

	return "";
}

rule "Active terms should not contain any illegal characters."
	dialect "mvel"
	when
		d : Description(active == true && error: findUnexpectedCharactersError(term), error.length != 0)
	then
		InvalidContent invalid = new InvalidContent("e0745082-0b54-4bfb-ab77-6aa039ec692a",
				d, "An active term must not contain any \'" + error + "\' characters.", d.released ? Severity.WARNING : Severity.ERROR);
		invalid.ignorePublishedCheck();
		invalidContent.add(invalid);
end
