import org.ihtsdo.drools.domain.Concept
import org.ihtsdo.drools.domain.Description
import org.ihtsdo.drools.domain.Constants
import java.util.Collection
import org.ihtsdo.drools.helper.DescriptionHelper
import org.ihtsdo.drools.response.InvalidContent
import org.ihtsdo.drools.response.Severity

global java.util.List invalidContent

function boolean isFirstCharUppercase(String term) {
	char c = term.trim().charAt(0);
	return c == Character.toUpperCase(c);
}

rule "TextDefinition first character case"
	dialect "mvel"
	when
		d : Description(active && textDefinition && caseSignificanceId == Constants.ENTIRE_TERM_CASE_SENSITIVE && !isFirstCharUppercase(term))
	then
		invalidContent.add(new InvalidContent(d, "The first character of a text definition should be upper case.", Severity.WARNING));
end

rule "Preferred TextDefinition per dialect"
	dialect "mvel"
	when
		c : Concept(active && DescriptionHelper.isMoreThanOneAcceptabilityPerDialect(c, true, Constants.TEXT_DEFINITION, Constants.ACCEPTABILITY_PREFERRED))
	then
		InvalidContent invalid = new InvalidContent(c, "A concept may only have one Preferred text definition in each dialect.");
		invalid.ignorePublishedCheck();
		invalidContent.add(invalid);
end

rule "TextDefinition preferred"
	dialect "mvel"
	when
		d : Description(active && textDefinition && DescriptionHelper.isAcceptabilityValuePresentOnDescription(d, Constants.ACCEPTABILITY_ACCEPTABLE))
	then
		InvalidContent invalid = new InvalidContent(d, "Text definitions must always be preferred.");
		invalid.ignorePublishedCheck();
		invalidContent.add(invalid);
end

rule "TextDefinition has acceptability map"
	dialect "mvel"
	when
		d : Description(active && textDefinition && !DescriptionHelper.hasAcceptabilityMap(d))
	then
		InvalidContent invalid = new InvalidContent(d, "Text definitions must be preferred in at least one dialect.");
		invalid.ignorePublishedCheck();
		invalidContent.add(invalid);
end
